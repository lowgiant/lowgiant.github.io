{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"목표 지난주에 만든 접두사 명령어 코드를 접미사로 변경하기  코드 품질 높이기 sdscatfmt, addReplyBulkSds echoSiYeon 명령어 코드 품질 개선하기 환경 인텔 맥 Clion vscode에서 디버깅 힘들어서 넘어왔는데 개발하기 너무 편합니다. intellij만 좋은 게 아닙니다. Before(접두사)  sds repo 공식 레포에서…","fields":{"slug":"/OSSCA-4-week/"},"frontmatter":{"date":"November 05, 2023","title":"4주차-Redis 명령어 코드 품질 높이기","tags":["Redis"]},"rawMarkdownBody":"\n## 목표\n- 지난주에 만든 접두사 명령어 코드를 접미사로 변경하기 \n- 코드 품질 높이기\n  - sdscatfmt, addReplyBulkSds\n  \n## echoSiYeon 명령어 코드 품질 개선하기\n- 환경\n  - 인텔 맥\n  - Clion\n    - vscode에서 디버깅 힘들어서 넘어왔는데 개발하기 너무 편합니다.\n    - intellij만 좋은 게 아닙니다.\n\n### Before(접두사)\n```C\nvoid echoSiYeonCommand(client *c) {\n    sds prefixSYtoEcho = sdscatprintf(sdsempty(), \"SY%s\", (char *)c->argv[1]->ptr);\n    addReplyBulkCBuffer(c, prefixSYtoEcho, sdslen(prefixSYtoEcho));\n    sdsfree(prefixSYtoEcho);\n}\n```\n![sdscatprintf.png](sdscatprintf.png)\n1. [sds repo](https://github.com/antirez/sds#formatting-strings) 공식 레포에서 문자열 더하는 부분을 찾았습니다.\n   - 라이브러리를 이해하기 전까지는 변수명이 왜 이럴까 궁금했습니다. \n   - cat, print가 한꺼번에 있으니.. 대충 의미는 알겠지만..\n   - sds.c 파일에서 주석을 보고 믿고 사용했습니다.\n  \n2. addReplyBulkSds를 사용하려고 했습니다.\n   - 하지만 server.c에는 addReplyBulkSds를 사용하지 않고 있어서 고민이 커졌습니다.  \n   - addReplyBulkCBuffer를 선택한 이유는 ping 명령어를 보고 참조했습니다.\n\n### After(접미사)\n```C\nvoid echoSiYeonCommand(client *c) {\n    sds suffixSYtoEcho = sdscatfmt(sdsempty(), \"%s_SY\", c->argv[1]->ptr);\n    addReplyBulkSds(c, suffixSYtoEcho);\n}\n```\n\n- sdscatprintf에서 sdscatfmt 변경\n   ![Twoyear.png](2year.png)\n   - 코드의 만들어진 시점은 대략 2년 정도 차이가 납니다.\n   - SDS는 레디스에 함께 있다가 따로 나온 버전이 1.0인데요. 그 버전에 sdscatprintf 포함이 되어 있습니다. \n   - sdscatfmt는 SDS 2.0 버전으로 업그레이드할 때 간단한 작업에서 사용할 수 있게 성능을 개선 했습니다.\n\n##PS\n- 생각보다 오픈소스에서 고민해야 하는 것이 많다는 것을 깨닫게 됐습니다.\n  - 어떤 식으로 의사결정 하는지 그리고 코드가 어떻게 만들어지고 사용되는지 등\n- 명령어들이 처음 만들어진 것을 보고 아랫부분에 개선되는 버전들이 나오는 것을 알게 됐습니다.\n- SDS에서 ReadME에 앞줄에 sdscatprintf -> sdscatfmt 이거 쓰라고 한 부분을 유심히 봤다면 바로 사용했을 텐데 아쉬움이 남았습니다.\n  - 아마도 변수명이 마음에 들지 않아서 좀 더 간결하게 바꾸지 않았을까 생각이 듭니다."},{"excerpt":"목표 레디스에 명령어를 만들 계획입니다. 명령어를 만들면서 '내부 구조'를 이해하려는게 핵심 기존에 만들어진 echo 명령을 참조해 명령 추가하기 echo 명령 후 출력 값에 접두사를 SY를 추가해보도록 하겠습니다. echo란?  echo는 받은 내용을 그대로 다시 돌려주는 명령입니다. ex: echo hello 출력 값에 hello가 보여집니다. 이 명…","fields":{"slug":"/OSSCA-3-week/"},"frontmatter":{"date":"October 22, 2023","title":"3주차-Redis 명령어 만들기","tags":["Redis"]},"rawMarkdownBody":"\r\n## 목표\r\n- 레디스에 명령어를 만들 계획입니다.\r\n  - 명령어를 만들면서 '내부 구조'를 이해하려는게 핵심\r\n- 기존에 만들어진 echo 명령을 참조해 명령 추가하기\r\n  - echo 명령 후 출력 값에 접두사를 SY를 추가해보도록 하겠습니다.\r\n\r\n## echo란?\r\n![echo command](echo.png)\r\n\r\n- echo는 받은 내용을 그대로 다시 돌려주는 명령입니다.\r\n  - ex: echo hello\r\n    - 출력 값에 hello가 보여집니다.\r\n- 이 명령어는 레디스에 만 있는 것은 아닙니다.\r\n  - 유닉스 초판(1969~70)부터 만들어진 명령어로 레디스에서도 필요해서 만들었을 것입니다.\r\n- 이 밖에 영어 뜻은 메아리 이지만, 주로 노래방 기계에 에코 설정한다고 할 때 많이 들어서 그 에코로 이해하면 편하지 않을까 싶습니다. \r\n\r\n## 개발 전 Redis CLI 명령어 확인\r\n- 만들려고 하는 명령어 이름은 'echoSiYeon'입니다.\r\n- Redis CLI 상태에서 만들기 전에 명령어를 입력 해서 어떠한 에러가 나오는 지 확인 해보겠습니다. \r\n\r\n![unkwon command](unkwon-command.png)\r\n\r\n- (error) ERR unknown command 'echoSiYeon', with args beginning with: 'Hello'\r\n  - 만들기 전에 이러한 에러 메시지를 받는 것을 알 수 있습니다.\r\n    - 이 에러가 안 나오게 한 후 출력값이 SYHello가 나오도록 해보겠습니다.\r\n\r\n## echoSiYeon 명령어 개발하기\r\n- 환경\r\n  - 인텔 맥\r\n\r\n### 1. echo 관련 파일 찾기 \r\n- redis repo에서 echo 검색 해보기\r\n\r\n![echo 관련 파일 검색](echo-search.png)\r\n\r\n- 크게 두가지를 확인 할 수 있습니다.\r\n  - echo.lua(테스트 관련 코드로 보입니다.)\r\n  - echo.json(명령어에 대한 정보가 있을 듯 싶습니다.)\r\n\r\n### 2. lua 테스트 코드 작성 \r\n![Redis lua version](Redis-lua-version.png)\r\n\r\n- [레디스](https://github.com/redis/redis/tree/unstable/deps#lua)는 lua 5.1 버전을 사용합니다.\r\n  - 맥에서 최신 버전은 5.4로 확인 했습니다.\r\n  - 버전 별 명령어가 크게 차이가 있어서 레디스 기준인 5.1 버전으로 작성하는 것을 추천드립니다.\r\n  - lua 설치는 아래 코드로 했습니다.\r\n  - brew install lua@5.1\r\n\r\n\r\n![echoSiYeon lua test](echoSiYeon-lua-test.png)\r\n\r\n- echo 코드를 보고 접두사를 추가해 보았습니다.\r\n  \r\n### 3. command json 어떻게 사용되는지\r\n\r\n![commands](commands.png)\r\n\r\n- [레디스](https://github.com/redis/redis#commandsc)는 src/commands 폴더의 json 파일은 utils/generate-command-code.py 파일에 의해 COMMAND 명령에 관련된 메타데이터를 만듭니다. \r\n  - echoSiYeon.json을 만들도록 하겠습니다.\r\n\r\n![echoSiYeon json](echoSiYeon-json.png)\r\n\r\n- json을 추가 한다고 해서 명령어가 만들어지는 것은 아닙니다.\r\n\r\n### 4. 레디스 서버의 진입점 server.c\r\n\r\n- [server.c](https://github.com/redis/redis#serverc)는 7천 줄이 될 만큼 레디스의 중심이 되는 코드 입니다. \r\n  - pingCommand(4519 line) 밑에 echoCommand가 있습니다.\r\n  - echoSiYeonCommand를 만들도록 하겠습니다. \r\n    ```C\r\n    void echoSiYeonCommand(client *c) {\r\n        sds prefixSYtoEcho = sdscatprintf(sdsempty(), \"SY%s\", (char *)c->argv[1]->ptr);\r\n        addReplyBulkCBuffer(c, prefixSYtoEcho, sdslen(prefixSYtoEcho));\r\n        sdsfree(prefixSYtoEcho);\r\n    }\r\n    ```\r\n    - sds는 \"Simple Dynamic Strings\"의 약자로 동적 문자열을 효율적으로 다룰 수 있는 레디스의 데이터 형식입니다.\r\n       - 또한 sds는 레디스를 만든 Salvatore Sanfilippo가 대부분을 만들었습니다(외 5명). \r\n         - 명령어에 대한 자세한 정보는 [sds repo](https://github.com/antirez/sds)를 참조 하시면 됩니다.\r\n    - addReplyBulkCBuffer 함수를 사용해 레디스 클라이언트에게 응답을 보냅니다. \r\n    - sdsfree 함수를 사용해 메모리 누수를 방지했습니다.\r\n\r\n### 5. server.c 있으면 server.h 있겠죠.\r\n\r\n```C\r\nvoid echoSiYeonCommand(client *c);\r\n```\r\n- 위 코드를 추가 했습니다. \r\n\r\n### 6. 명령어 코드 완료. 'make'하자\r\n- make 명령어 실행\r\n- 코드 동작 하는 redis cli 확인\r\n![echoSiYeon](echosiyeon-make.png)\r\n  - 계획 한대로 작동이 잘 됐습니다. \r\n\r\n\r\n## PS\r\n- Redis ReadMe를 세부적으로 읽으면서 동작 원리를 이해하려고 노력했습니다.\r\n- 오랜만에 c언어와 처음 보는 lua는 이젠 조금 코드가 보이기 시작하네요. ㅎ\r\n- 남은 한주도 마무리 잘하시길 기원합니다."},{"excerpt":"Git 기본 명령어 및 사용법 clone 원격 저장소의 코드를 복제하여 로컬 환경에 가져옴 사용 방법 git clone '레포지토리명' branch 새로운 브랜치를 생성하거나 현재 존재하는 브랜치를 확인할 때 사용  사용 방법 git branch '브런치명'(브런치 생성) git branch(생성된 브런치 확인) push 로컬에 작업한 변경사항을 원격저장…","fields":{"slug":"/OSSCA-1-week/"},"frontmatter":{"date":"October 15, 2023","title":"1주차-Git","tags":["Redis"]},"rawMarkdownBody":"\r\n## Git 기본 명령어 및 사용법\r\n\r\n### clone\r\n- 원격 저장소의 코드를 복제하여 로컬 환경에 가져옴\r\n- 사용 방법\r\n\t- git clone '레포지토리명'\r\n\r\n### branch\r\n- 새로운 브랜치를 생성하거나 현재 존재하는 브랜치를 확인할 때 사용 \r\n- 사용 방법\r\n  - git branch '브런치명'(브런치 생성)\r\n  - git branch(생성된 브런치 확인)\r\n\t\t\r\n### push\r\n- 로컬에 작업한 변경사항을 원격저장소에 업로드하여 저장 \r\n- 사용 방법\r\n  - git push origin '브런치명' \r\n\r\n### pull\r\n- 원격 저장소의 변경사항을 로컬에 반영하여 최신 상태를 유지\r\n- 사용 방법\r\n  - git pull origin '브런치명'\r\n\r\n### add\r\n- 변경된 파일을 스테이지 영역에 추가\r\n- 커밋하기 전 파일 단위와 전체 변경사항을 선택적으로 지정 가능\r\n- 사용 방법\r\n  - git add 파일명(파일면 파일만 추가)\r\n  - git add . (모든 변경사항 추가)\r\n\r\n### commit\r\n- 스테이징 영역에 있는 변경사항을 로컬 저장소에 저장하는 역할\r\n- 사용 방법\r\n    - git commit -m \"Commit message\"\r\n\r\n### cherrypick\r\n- 다른 브랜치에서 특정 커밋을 선택하여 현재 브랜치에 적용할 때 사용\r\n- 사용 방법\r\n  - git cherry-pick <commit_hash>"},{"excerpt":"Redis Build 작업 환경 인텔 맥 make release.h 없다는 에러 발생  redis issue check mkreleasehdr.sh 문제 였음 위 링크를 통해서 인코딩 문제를 확인(헉.. 멘토님 2012 작성된 글 발견..) dos2unix 활용해서 해결  기타 참조 release.h not found make test 명령어 실행 후 4…","fields":{"slug":"/OSSCA-2-week/"},"frontmatter":{"date":"October 15, 2023","title":"2주차-Redis Build","tags":["Redis"]},"rawMarkdownBody":"\r\n## Redis Build\r\n- 작업 환경\r\n  - 인텔 맥\r\n\r\n### make\r\n\r\n- release.h 없다는 에러 발생\r\n\r\n![release not found](release-not-found.png)\r\n\r\n- redis issue check\r\n  - [mkreleasehdr.sh 문제 였음](https://github.com/redis/redis/issues/793)\r\n      - 위 링크를 통해서 인코딩 문제를 확인(헉.. 멘토님 2012 작성된 글 발견..)\r\n          - dos2unix 활용해서 해결 \r\n  - 기타 참조 [release.h not found](https://github.com/redis/redis/issues/4492)\r\n\r\n\r\n### make test\r\n- 명령어 실행 후 4분 정도 걸림\r\n  \r\n![make test](make-test.png)\r\n\r\n### 번외 redis 실행 테스트\r\n- [레디스 공식 문서 참조 해서 테스트 진행](https://docs.redis.com/latest/rs/databases/connect/)\r\n  - 중간에 Code example 부터 진행\r\n\r\n![](redis.png)\r\n\r\n- redis-server\r\n\r\n- vi redis test.py\r\n\t```python\r\n\timport redis\r\n\tr = redis.StrictRedis(host='127.0.0.1', port=6379)\r\n\tprint(\"set key1 123\")\r\n\tprint(r.set('key1', '123'))\r\n\tprint(\"get key1\")\r\n\tprint(r.get('key1'))\r\n\t```\r\n- python redis test.py\r\n  \r\n- redis-cli\r\n  - get key1\r\n    - 확인 잘됨\r\n\r\n"}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}